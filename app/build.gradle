plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'

    // KotlinX serialization
    id 'org.jetbrains.kotlin.plugin.serialization'
    // For Android Room
    id "org.jetbrains.kotlin.kapt"
    // Dagger - Hilt
    id 'com.google.dagger.hilt.android'
    // Secrets Gradle
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
}

// Load properties from local.properties file
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

android {
    namespace 'pt.ulisboa.tecnico.cmov.librarist'
    compileSdk 33

    defaultConfig {
        applicationId "pt.ulisboa.tecnico.cmov.librarist"
        minSdk 28
        targetSdk 33
        versionCode 1
        versionName "1.0"
        buildConfigField 'String', 'GOOGLE_API_KEY', "\"${properties.getProperty('GOOGLE_MAPS_API_KEY')}\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-// Initialize Places.\n' +
                    '        Places.initialize(applicationContext, BuildConfig.GOOGLE_API_KEY)rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    buildFeatures {
        compose true
        viewBinding = true
        buildConfig = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.7'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    kapt {
        arguments {
            arg("room.schemaLocation", "$projectDir/schemas")
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.activity:activity-compose:1.5.1'
    implementation platform('androidx.compose:compose-bom:2022.10.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3:1.2.0-alpha01'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation platform('androidx.compose:compose-bom:2022.10.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'

    // Navigation
    implementation "androidx.navigation:navigation-compose:2.5.3"

    // Coil - loading images
    implementation "io.coil-kt:coil-compose:2.2.2"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    // Retrofit with Scalar Converter
    implementation "com.squareup.retrofit2:converter-scalars:2.9.0"

    // Kotlinx serialization
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1"
    implementation "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:0.8.0"

    // Android Room
    def room_version = "2.5.0"
    // Using ktx instead of runtime because of withTransaction()
    implementation "androidx.room:room-ktx:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"

    // To use Kotlin annotation processing tool (kapt)
    kapt "androidx.room:room-compiler:$room_version"
    // Paging 3 Integration
    implementation "androidx.room:room-paging:$room_version"

    // Paging 3.1
    def paging_version = "3.1.1"
    implementation "androidx.paging:paging-runtime:$paging_version"

    // Dagger - Hilt
    implementation "com.google.dagger:hilt-android:2.44"
    kapt "com.google.dagger:hilt-compiler:2.44"
    kapt 'androidx.hilt:hilt-compiler:1.0.0'
    implementation 'androidx.hilt:hilt-navigation-compose:1.1.0-alpha01'

    // Serializable date datatypes
    implementation "org.jetbrains.kotlinx:kotlinx-datetime:0.3.2"

    // Google maps
    implementation 'com.google.android.gms:play-services-maps:18.1.0'
    implementation 'com.google.android.gms:play-services-location:21.0.1'
    // Google maps for compose
    implementation 'com.google.maps.android:maps-compose:2.8.0'

    // KTX for the Maps SDK for Android
    implementation 'com.google.maps.android:maps-ktx:3.2.1'
    // KTX for the Maps SDK for Android Utility Library
    implementation 'com.google.maps.android:maps-utils-ktx:3.2.1'

    // Bar code scanner
    implementation 'com.google.android.gms:play-services-code-scanner:16.0.0'
    implementation "androidx.compose.runtime:runtime-livedata:1.5.0-alpha04"

    // CameraX
    def camerax_version = "1.2.2"
    implementation("androidx.camera:camera-camera2:${camerax_version}")
    implementation("androidx.camera:camera-lifecycle:${camerax_version}")
    implementation("androidx.camera:camera-view:${camerax_version}")

    // GSON for converting custom datatypes
    implementation 'com.google.code.gson:gson:2.10.1'

    // Retrofit logging
    implementation "com.squareup.okhttp3:logging-interceptor:4.10.0"

    // Places API - address autocomplete
    implementation 'com.google.android.libraries.places:places:3.1.0'
}

kapt {
    useBuildCache = false
    correctErrorTypes true
}